#!/bin/sh

# Exit immediately if a command exits with a non-zero status
set -e

# Global variables

KEYLIME_AGENT_LOG="/tmp/keylime_agent.log"
ATTESTATION_TIMEOUT=30  # seconds to wait for attestation

# Function to parse kernel command-line arguments into variables
parse_cmdline() {
    for param in $(cat /proc/cmdline); do
        case "$param" in
            *=*)
                key=${param%%=*}
                value=${param#*=}
                case "$key" in
                    kernel_url)          KERNEL_URL="$value" ;;
                    initrd_url)          INITRD_URL="$value" ;;
                    kernel_sha)          KERNEL_SHA="$value" ;;
                    initrd_sha)          INITRD_SHA="$value" ;;
                    next_kernel_params)  NEXT_KERNEL_PARAMS="$value" ;;
                    tpm_attestation)     TPM_ATTESTATION="$value" ;;
                    attestation_server)  ATTESTATION_SERVER="$value" ;;
                esac
                ;;
        esac
    done
}

# Initialize variables with default values
initialize_defaults() {
    KERNEL_URL=${KERNEL_URL:-"https://default.example.com/kernel"}
    INITRD_URL=${INITRD_URL:-"https://default.example.com/initrd.img"}
    KERNEL_SHA=${KERNEL_SHA:-""}
    INITRD_SHA=${INITRD_SHA:-""}
    NEXT_KERNEL_PARAMS=${NEXT_KERNEL_PARAMS:-"console=ttyS0"}
    TPM_ATTESTATION=${TPM_ATTESTATION:-0}
    ATTESTATION_SERVER=${ATTESTATION_SERVER:-"https://attestation.server/verify"}
}

# Mount required filesystems
mount_filesystems() {
    mount -t proc none /proc
    mount -t sysfs none /sys
    mount -t devtmpfs none /dev
    mount -t tmpfs tmpfs /run
}

# Start required daemons
start_daemons() {
    mkdir -p /var/run/dbus /tmp
    echo "Starting D-Bus daemon..."
    dbus-daemon --system --fork

    echo "Starting tpm2-abrmd..."
    tpm2-abrmd --allow-root --tcti=device &
    TPM2_ABRMD_PID=$!
}

# Stop daemons and clean up
stop_daemons() {
    echo "Stopping tpm2-abrmd..."
    kill "$TPM2_ABRMD_PID" || true
    if [ -f /var/run/dbus/pid ]; then
        DBUS_PID=$(cat /var/run/dbus/pid)
        kill "$DBUS_PID" || true
    fi
}


# --- Keylime Agent Configuration and Startup ---
# --- Keylime Agent Configuration and Startup ---

# --- Keylime Agent Configuration, Certificate Handling, Startup, and Firewall ---
configure_and_start_keylime() {
    echo "[init] Configuring Keylime agent..."

    # 1. Generate a UUID for the agent
    AGENT_UUID=$(uuidgen)

    # 2. Extract IP and Port from ATTESTATION_SERVER
    VERIFIER_IP=$(echo "$ATTESTATION_SERVER" | awk -F'://' '{print $2}' | awk -F':' '{print $1}')
    VERIFIER_PORT=$(echo "$ATTESTATION_SERVER" | awk -F':' '{print $3}')
    REGISTRAR_IP=$VERIFIER_IP
    REGISTRAR_PORT=$((VERIFIER_PORT + 1))

    # 3. Get the agent's IP address (reliably)
    CONTACT_IP=$(ip -o -4 addr show | awk '$2 !~ /^lo/ {print $4}' | cut -d '/' -f 1)
     if [ -z "$CONTACT_IP" ]; then
        echo "Error: Could not determine agent IP address."
        exit 1
    fi

    # 4. Modify the existing agent.conf using sed
    sed -i "s/^agent_uuid =.*/agent_uuid = $AGENT_UUID/" /etc/keylime/agent.conf
    sed -i "s/^verifier_ip =.*/verifier_ip = $VERIFIER_IP/" /etc/keylime/agent.conf
    sed -i "s/^verifier_port =.*/verifier_port = $VERIFIER_PORT/" /etc/keylime/agent.conf
    sed -i "s/^registrar_ip =.*/registrar_ip = $REGISTRAR_IP/" /etc/keylime/agent.conf
    sed -i "s/^registrar_port =.*/registrar_port = $REGISTRAR_PORT/" /etc/keylime/agent.conf
    sed -i "s/^contact_ip =.*/contact_ip = $CONTACT_IP/" /etc/keylime/agent.conf
    # The agent config file doesnt have the below parameters in the config, lets add them
    echo "cloud_agent_d = keylime_agent_service" >> /etc/keylime/agent.conf


    echo "[init] keylime.conf updated."

   # TODO: Add this command instead scp root@192.168.1.16:/var/lib/keylime/cv_ca/server* /var/lib/keylime/ 
   We need all server keys to be copied to acecss thes REST API

    # 5. Copy the CA certificate from a trusted remote server
    echo "[init] Copying CA certificate from remote server..."
    mkdir -p /var/lib/keylime/cv_ca

    # Replace CERT_SERVER_ADDRESS with your actual server/hostname or IP
    # Also ensure the path /var/lib/keylime/cv_ca/cacert.crt exists on that server
    # and that you have SSH credentials or keys set up.
    if ! scp root@VERIFIER_IP:/var/lib/keylime/cv_ca/cacert.crt /var/lib/keylime/cv_ca/; then
        echo "Error: Failed to copy CA certificate via scp."
        exit 1
    fi

    # 6. Change the owner of the certificate to keylime:tss (recursively, if needed)
    chown -R keylime:tss /var/lib/keylime/cv_ca



    # 7. Configure Firewall (IMPORTANT: Requires firewalld to be running in the final system)
    echo "[init] Configuring firewall..."
    # Create symlinks to busybox for firewall-cmd.
    ln -s /usr/sbin/busybox /usr/sbin/firewall-cmd
    /usr/sbin/firewall-cmd --add-port 9002/tcp || true # Ignore errors in initrd
    /usr/sbin/firewall-cmd --runtime-to-permanent || true # Ignore errors in initrd

    # 8. Enable and start the Keylime agent service
    ln -s /usr/sbin/busybox /sbin/systemctl
    /sbin/systemctl enable keylime_agent
    /sbin/systemctl start keylime_agent

    echo "[init] Keylime agent configured, certificate downloaded, firewall configured, and service started."
}

KEYLIME_AGENT_LOG="/tmp/keylime_agent.log"
KEYLIME_VERIFIER_TIMEOUT=60  # seconds to wait for attestation
KEYLIME_VERIFIER_INTERVAL=5  # seconds between polls

wait_for_attestation() {
    # Read Agent UUID and Verifier info from keylime.conf
    if [ ! -f /etc/keylime/agent.conf ]; then #use agent.conf
        echo "[init] ERROR: /etc/keylime/agent.conf not found!"
        return 1
    fi

    # Extract the relevant lines from keylime.conf
    AGENT_UUID=$(awk -F= '/^agent_uuid/ {gsub(/[ \t]+/, "", $2); print $2}' /etc/keylime/agent.conf) #use agent.conf
    VERIFIER_IP=$(awk -F= '/^verifier_ip/ {gsub(/[ \t]+/, "", $2); print $2}' /etc/keylime/agent.conf) #use agent.conf
    VERIFIER_PORT=$(awk -F= '/^verifier_port/ {gsub(/[ \t]+/, "", $2); print $2}' /etc/keylime/agent.conf) #use agent.conf

    if [ -z "$AGENT_UUID" ] || [ -z "$VERIFIER_IP" ] || [ -z "$VERIFIER_PORT" ]; then
        echo "[init] ERROR: Could not parse agent_uuid, verifier_ip or verifier_port from keylime.conf"
        return 1
    fi

    echo "[init] Waiting for Keylime Verifier to confirm attestation for agent: $AGENT_UUID"
    echo "[init] Verifier at $VERIFIER_IP:$VERIFIER_PORT"
    echo "[init] Timeout: $KEYLIME_VERIFIER_TIMEOUT seconds"

    end_time=$(( $(date +%s) + KEYLIME_VERIFIER_TIMEOUT ))

    while [ "$(date +%s)" -lt "$end_time" ]; do
        # Query the Verifier for agent's status
        RESPONSE=$(curl -s --cacert /etc/ssl/ca-bundle.crt "https://${VERIFIER_IP}:${VERIFIER_PORT}/agents/${AGENT_UUID}?operational_state=get_quote" || true)
         # Check if the response indicates a successful attestation
        if echo "$RESPONSE" | grep -q '"operational_state":"Trusted"'; then
            echo "[init] Keylime attestation: Agent is TRUSTED."
            return 0  # Exit with success
        fi

        if echo "$RESPONSE" | grep -q '"code":404'; then
          echo "[init] Error : Make sure keylime.conf is created with correct verifier and registar ip address "
          return 1
        fi
        echo "[init] Attestation not yet trusted (response: $RESPONSE). Waiting ${KEYLIME_VERIFIER_INTERVAL}s..."
        sleep "$KEYLIME_VERIFIER_INTERVAL"
    done

    # If we exit the loop, we timed out
    echo "[init] Timed out waiting for Keylime attestation to become trusted."
    return 1
}



wait_for_attestation_demo() {
    echo "[init] Waiting up to $ATTESTATION_TIMEOUT seconds for Keylime attestation..."

    # Naive approach: we just sleep for the given duration
    # In real usage, we'd poll the Verifier or parse the agent logs more robustly.
    sleep $ATTESTATION_TIMEOUT

    # For demonstration, we assume success. In production, you'd parse /tmp/keylime_agent.log
    # or query the Verifier's REST API to confirm "trusted" status.
    echo "[init] Keylime attestation (assuming success)."
}

# Unmount filesystems
unmount_filesystems() {
    umount /proc || true
    umount /sys || true
    umount /dev || true
    umount /run || true
}

#Validate Parameters
validate_params() {
    if [ -z "$KERNEL_URL" ]; then
        echo "Error: KERNEL_URL is not set."
        exit 1
    fi
    if [ -z "$INITRD_URL" ]; then
        echo "Error: INITRD_URL is not set."
        exit 1
    fi
    if [ "$TPM_ATTESTATION" = "1" ] && [ -z "$ATTESTATION_SERVER" ]; then
        echo "Error: ATTESTATION_SERVER is required for TPM attestation."
        exit 1
    fi
}

# Set up networking (assumes DHCP)
setup_networking() {
    echo "Setting up networking..."
    busybox udhcpc -i eth0
}

# Download files using aria2
download_file() {
    URL="$1"
    OUTPUT="$2"
    echo "Downloading $OUTPUT from $URL..."
    aria2c --enable-dht --enable-peer-exchange \
           --bt-seed-unverified=true \
           --dir=/tmp \
           --out="$OUTPUT" "$URL"
}

# Verify file SHA256 hash
verify_sha256() {
    FILE="$1"
    EXPECTED_SHA="$2"
    echo "Verifying SHA256 for $FILE..."
    echo "$EXPECTED_SHA  $FILE" | sha256sum -c -
}

cleanup() {
    echo "Performing cleanup..."
    stop_daemons
    unmount_filesystems
}



# Main script execution
main() {
    trap cleanup EXIT
    
    parse_cmdline
    initialize_defaults
    validate_params

    setup_networking

    echo "Kernel URL: $KERNEL_URL"
    echo "Initrd URL: $INITRD_URL"
    echo "Kernel SHA: $KERNEL_SHA"
    echo "Initrd SHA: $INITRD_SHA"
    echo "Next Kernel Params: $NEXT_KERNEL_PARAMS"
    echo "TPM Attestation: $TPM_ATTESTATION"

    mount_filesystems
    start_daemons

    # Wait for daemons to be ready
    sleep 1


    if [ "$TPM_ATTESTATION" = "1" ]; then
        configure_and_start_keylime()  # Configure and start Keylime
        if wait_for_attestation; then
            echo "[init] Keylime attestation successful!"
        else
            echo "[init] Keylime attestation FAILED."
            exit 1
        fi
    else
        echo "TPM attestation is disabled. Proceeding without attestation."
    fi

    setup_networking

    # Download kernel and initrd
    download_file "$KERNEL_URL" "kernel"
    download_file "$INITRD_URL" "initrd.img"

    # Verify SHA256 hashes if provided
    if [ -n "$KERNEL_SHA" ]; then
        verify_sha256 "/tmp/kernel" "$KERNEL_SHA"
    fi

    if [ -n "$INITRD_SHA" ]; then
        verify_sha256 "/tmp/initrd.img" "$INITRD_SHA"
    fi

    echo "SHA256 verification passed for kernel and initrd."

    # Clean up TPM resources
    tpm2_flushcontext --transient-object

    stop_daemons
    unmount_filesystems

    # Boot the downloaded kernel and initrd
    echo "Booting the new kernel..."
    kexec -l /tmp/kernel --initrd=/tmp/initrd.img --append="$NEXT_KERNEL_PARAMS"
    kexec -e
}

main "$@"
