#!/bin/sh

# Parse kernel command-line arguments
kernel_url=""
initrd_url=""
kernel_sha=""
initrd_sha=""
next_kernel_params=""
tpm_attestation=0  # Default value for TPM attestation

# Parse kernel command-line arguments
for param in $(cat /proc/cmdline); do
    case $param in
        kernel_url=*)
            kernel_url="${param#kernel_url=}"
            ;;
        initrd_url=*)
            initrd_url="${param#initrd_url=}"
            ;;
        kernel_sha=*)
            kernel_sha="${param#kernel_sha=}"
            ;;
        initrd_sha=*)
            initrd_sha="${param#initrd_sha=}"
            ;;
        next_kernel_params=*)
            next_kernel_params="${param#next_kernel_params=}"
            ;;
        tpm_attestation=*)
        tpm_attestation="${param#tpm_attestation=}"
            ;;
        attestation_server=*)
        attestation_server="${param#attestation_server=}"
            ;;    
    esac
done

# Default values if not provided
kernel_url=${kernel_url:-"https://default.example.com/kernel"}
initrd_url=${initrd_url:-"https://default.example.com/initrd.img"}
kernel_sha=${kernel_sha:-""}
initrd_sha=${initrd_sha:-""}
next_kernel_params=${next_kernel_params:-"console=ttyS0"}
tpm_attestation=${tpm_attestation:-0}
attestation_server=${attestation_server:-"https://attestation.server/verify"}



echo "Kernel URL: $kernel_url"
echo "Initrd URL: $initrd_url"
echo "Kernel SHA: $kernel_sha"
echo "Initrd SHA: $initrd_sha"
echo "Next Kernel Params: $next_kernel_params"
echo "TPM Attestation: $tpm_attestation"

# Mount required filesystems
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev
mount -t tmpfs tmpfs /run

# Create necessary directories
mkdir -p /var/run/dbus
mkdir -p /tmp

# Start D-Bus daemon
echo "Starting D-Bus daemon..."
dbus-daemon --system --fork

# Start TPM2 Access Broker and Resource Manager (tpm2-abrmd)
echo "Starting tpm2-abrmd..."
tpm2-abrmd --allow-root --tcti=device &

# Wait a moment to ensure daemons are running
sleep 1

# Function to read kernel command line parameters
get_cmdline_param() {
    for param in $(cat /proc/cmdline); do
        case "$param" in
            $1=*)
                echo "${param##*=}"
                return 0
                ;;
        esac
    done
    return 1
}

# Read the attestation flag
TPM_ATTESTATION=$(get_cmdline_param tpm_attestation)

# Default to 0 if not set
if [ -z "$TPM_ATTESTATION" ]; then
    TPM_ATTESTATION=0
fi

echo "TPM attestation flag is set to: $TPM_ATTESTATION"

# If TPM attestation is required
if [ "$TPM_ATTESTATION" = "1" ]; then
    echo "TPM attestation is enabled."
    # Run TPM initialization script
    if [ -x /bin/tpm_init.sh ]; then
        /bin/tpm_init.sh
        if [ $? -ne 0 ]; then
            echo "TPM initialization failed."
            exit 1
        fi
    else
        echo "TPM initialization script not found or not executable."
        exit 1
    fi

    # Check for TPM device
    if [ -e /dev/tpm0 ] || [ -e /dev/tpmrm0 ]; then
        echo "TPM device found. Performing attestation..."

        # Read PCRs
        tpm2_pcrread sha256:0,1,2 > /tmp/pcr_values.txt
        if [ $? -ne 0 ]; then
            echo "Failed to read PCR values."
            exit 1
        fi

        # Generate a nonce (could be from a remote server)
        NONCE=$(head -c 20 /dev/urandom | base64)
        echo "$NONCE" > /tmp/nonce.txt

        # Create a quote
        tpm2_quote \
            --key-context /etc/tpm/attestation_key.ctx \
            --pcr-list sha256:0,1,2 \
            --message /tmp/quote_message.dat \
            --signature /tmp/quote_signature.dat \
            --qualification /tmp/nonce.txt
        if [ $? -ne 0 ]; then
            echo "Failed to create TPM quote."
            exit 1
        fi

        # Send the quote to the attestation server for verification
        # Replace ATT_SERVER_URL with appropriate attestation server URL
        ATT_SERVER_URL="https://attestation.server/verify"
        echo "Sending attestation data to server..."

        RESPONSE=$(curl -s -X POST \
            -F "message=@/tmp/quote_message.dat" \
            -F "signature=@/tmp/quote_signature.dat" \
            -F "nonce=$NONCE" \
            -F "pubkey=@/etc/tpm/attestation_key.pub" \
            "$ATT_SERVER_URL")

        if [ "$RESPONSE" = "OK" ]; then
            echo "TPM attestation successful."
        else
            echo "TPM attestation failed. Halting boot."
            exit 1
        fi

    else
        echo "TPM device not found. Halting boot."
        exit 1
    fi
else
    echo "TPM attestation is disabled. Proceeding without attestation."
fi




# Set up networking (assumes DHCP)
echo "Setting up networking..."
busybox udhcpc -i eth0

# Download the kernel and initrd using aria2
echo "Downloading kernel and initrd..."
aria2c --enable-dht --enable-peer-exchange \
       --bt-seed-unverified=true \
       --dir=/tmp \
       --out=kernel "$kernel_url"
if [ $? -ne 0 ]; then
    echo "Failed to download kernel."
    exit 1
fi
# Download the initrd using aria2
aria2c --enable-dht --enable-peer-exchange \
       --bt-seed-unverified=true \
       --dir=/tmp \
       --out=initrd.img "$initrd_url"
if [ $? -ne 0 ]; then
    echo "Failed to download initrd."
    exit 1
fi

# Verify SHA256 hashes if provided
if [ -n "$kernel_sha" ]; then
    echo "Verifying kernel SHA256..."
    echo "$kernel_sha  /tmp/kernel" | sha256sum -c -
    if [ $? -ne 0 ]; then
        echo "Kernel SHA256 verification failed!"
        exit 1
    fi
fi

if [ -n "$initrd_sha" ]; then
    echo "Verifying initrd SHA256..."
    echo "$initrd_sha  /tmp/initrd.img" | sha256sum -c -
    if [ $? -ne 0 ]; then
        echo "Initrd SHA256 verification failed!"
        exit 1
    fi
fi

echo "SHA256 verification passed for both kernel and initrd."

# Clean up TPM resources
tpm2_flushcontext --transient-object

# Stop TPM2 Access Broker and Resource Manager
echo "Stopping tpm2-abrmd..."
kill $TPM2_ABRMD_PID

# Unmount filesystems
umount /proc
umount /sys
umount /dev
umount /run


# Boot the downloaded kernel and initrd
kexec -l /tmp/kernel --initrd=/tmp/initrd.img --append="$next_kernel_params"
kexec -e

